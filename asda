def gaussian_elimination(matrix, b):
    n = len(matrix)
    augmented = [row + [b[i]] for i, row in enumerate(matrix)]
    
    for i in range(n):
        # Partial pivoting
        max_row = max(range(i, n), key=lambda k: abs(augmented[k][i]))
        if i != max_row:
            augmented[i], augmented[max_row] = augmented[max_row], augmented[i]
        
        diag = augmented[i][i]
        if diag == 0:
            raise ValueError("Matrix is singular or near-singular.")
        
        # Normalize row
        for j in range(i, n + 1):
            augmented[i][j] /= diag
        
        # Eliminate below
        for k in range(i + 1, n):
            factor = augmented[k][i]
            for j in range(i, n + 1):
                augmented[k][j] -= factor * augmented[i][j]
    
    # Back substitution
    x = [0] * n
    for i in range(n - 1, -1, -1):
        x[i] = augmented[i][n] - sum(augmented[i][j] * x[j] for j in range(i + 1, n))
    
    return x

# Example usage
A = [
    [2, 1, -1],
    [-3, -1, 2],
    [-2, 1, 2]
]
b = [8, -11, -3]

solution = gaussian_elimination(A, b)
print("Solution:", solution)
