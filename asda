def gauss_jordan_inverse(matrix):
    n = len(matrix)
    augmented = [row + [1 if i == j else 0 for j in range(n)] for i, row in enumerate(matrix)]
    
    for i in range(n):
        if augmented[i][i] == 0:
            for j in range(i + 1, n):
                if augmented[j][i] != 0:
                    augmented[i], augmented[j] = augmented[j], augmented[i] 
                    break
            else:
                raise ValueError("Matrix is singular and cannot be inverted.")
        
        pivot = augmented[i][i]
        augmented[i] = [element / pivot for element in augmented[i]] 
        
        for j in range(n):
            if i != j:
                factor = augmented[j][i]
                augmented[j] = [augmented[j][k] - factor * augmented[i][k] for k in range(2 * n)]  
    
    return [row[n:] for row in augmented]  


A = [[2, 1], [5, 3]]
A_inv = gauss_jordan_inverse(A)
print("Inverse of A:")
for row in A_inv:
    print(row)
